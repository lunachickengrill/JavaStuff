<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans.xsd     http://www.springframework.org/schema/data/jpa      http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd     http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.1.xsd     http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Enable annotation driven transaction management -->
	<tx:annotation-driven />

	<!-- <context:property-placeholder location="classpath:database.properties" 
		/> -->
	<context:property-placeholder
		location="classpath:hikariconfig.properties, classpath:dataSource.properties, classpath:jpa.properties"
		ignore-unresolvable="true" />

	<!-- Configure Spring Data JPA and set the base package of the repository 
		interfaces -->
	<jpa:repositories base-package="com.addressmanagement.infrastructure.persistence" />

	<!-- Creates the datasource bean. -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg index="0" ref="hikariConfig" />
	</bean>

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="dataSourceClassName" value="${hikari.dataSourceClassName}" />
		<property name="poolName" value="${hikari.poolName}" />
		<property name="maximumPoolSize" value="${hikari.maximumPoolSize}" />
		<property name="idleTimeout" value="${hikari.idleTimeout}" />
		<property name="maxLifetime" value="${hikari.maxLifetime}" />
		<property name="autoCommit" value="${hikari.autoCommit}" />

		<property name="dataSourceProperties">
			<props>
				<prop key="url">${dataSource.url}</prop>
				<prop key="user">${dataSource.user}</prop>
				<prop key="password">${dataSource.password}</prop>
			</props>
		</property>
	</bean>

	<!-- <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> <property 
		name="driverClassName" value="${db.driverClassName}" /> <property name="jdbcUrl" 
		value="${db.jdbcUrl}" /> <property name="username" value="${db.username}" 
		/> <property name="password" value="${db.password}" /> </bean> -->

	<!-- Creates the transaction manager bean that integrates the used JPA provider 
		with the Spring transaction mechanism. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Specifies the default settings that are compatible with Hibernate. -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

	<!-- Creates the bean that creates the JPA entity manager factory. -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="AddressManagementUnit" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.addressmanagement.domain.model" />
		<property name="jpaProperties">
			<props>
				<!-- Configures the used database dialect. This allows Hibernate to create 
					SQL that is optimized for the used database. -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- Specifies the action that is invoked to the database when the Hibernate 
					SessionFactory is created or closed. -->
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop>  -->
				<!-- Configures the naming strategy that is used when Hibernate creates 
					new database objects and schema elements -->
				<prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop>
				<!-- If the value of this property is true, Hibernate writes all SQL 
					statements to the console. -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- If the value of this property is true, Hibernate will use prettyprint 
					when it writes SQL to the console. -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>
	</bean>

</beans>
